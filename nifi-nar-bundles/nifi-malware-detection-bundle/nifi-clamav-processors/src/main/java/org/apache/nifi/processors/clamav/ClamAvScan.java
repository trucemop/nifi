/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.nifi.processors.clamav;

import org.apache.nifi.components.PropertyDescriptor;
import org.apache.nifi.flowfile.FlowFile;
import org.apache.nifi.processor.ProcessContext;
import org.apache.nifi.processor.ProcessSession;
import org.apache.nifi.processor.Relationship;
import org.apache.nifi.processor.exception.ProcessException;
import org.apache.nifi.processor.util.StandardValidators;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.nifi.annotation.behavior.EventDriven;
import org.apache.nifi.annotation.behavior.InputRequirement;
import org.apache.nifi.annotation.behavior.SideEffectFree;
import org.apache.nifi.annotation.behavior.WritesAttribute;
import org.apache.nifi.annotation.behavior.WritesAttributes;
import org.apache.nifi.annotation.documentation.CapabilityDescription;
import org.apache.nifi.annotation.documentation.Tags;

import org.apache.nifi.expression.ExpressionLanguageScope;
import xyz.capybara.clamav.ClamavClient;
import xyz.capybara.clamav.commands.scan.result.ScanResult;
import org.apache.nifi.processor.AbstractProcessor;
import org.apache.nifi.annotation.lifecycle.OnScheduled;
import org.apache.nifi.processor.ProcessorInitializationContext;
import org.apache.nifi.util.StopWatch;
import xyz.capybara.clamav.ClamavException;


@EventDriven
@SideEffectFree
@InputRequirement(InputRequirement.Requirement.INPUT_REQUIRED)
@Tags({"virus", "scan", "clamav", "detect", "malware"})
@CapabilityDescription("Sends flowfile content.  "
        + "an attribute with the name 'mime.type' is added with the value being the MIME Type. If the MIME Type cannot be determined, "
        + "the value will be set to 'application/octet-stream'. In addition, the attribute mime.extension will be set if a common file "
        + "extension for the MIME Type is known.")
@WritesAttributes({
@WritesAttribute(attribute = "clamav.status", description = "This Processor sets the FlowFile's mime.type attribute to the detected MIME Type. "
        + "If unable to detect the MIME Type, the attribute's value will be set to application/octet-stream")})
public class ClamAvScan extends AbstractProcessor {

    public static final PropertyDescriptor HOST = new PropertyDescriptor.Builder()
            .displayName("Host")
            .name("clam-host")
            .description("The hostname for the ClamAV daemon.")
            .required(true)
            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
            .build();

    public static final PropertyDescriptor PORT = new PropertyDescriptor.Builder()
            .displayName("Port")
            .name("clam-port")
            .description("The port for the ClamAV daemon.")
            .required(true)
            .addValidator(StandardValidators.PORT_VALIDATOR)
            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)
            .build();

    public static final Relationship REL_NOHITSFOUND = new Relationship.Builder()
            .name("nohits")
            .description("FlowFiles that pass a ClamAV scan are routed here")
            .build();

    public static final Relationship REL_HITSFOUND = new Relationship.Builder()
            .name("hits")
            .description("FlowFiles that do not pass a ClamAV scan are routed here")
            .build();

    public static final Relationship REL_FAILURE = new Relationship.Builder()
            .name("failure")
            .description("FlowFiles that fail to process are routed here")
            .build();

    private ClamavClient client;
    private Set<Relationship> relationships;
    private List<PropertyDescriptor> properties;

    @Override
    protected void init(final ProcessorInitializationContext context) {

        final List<PropertyDescriptor> properties = new ArrayList<>();
        properties.add(HOST);
        properties.add(PORT);
        this.properties = Collections.unmodifiableList(properties);

        final Set<Relationship> rels = new HashSet<>();
        rels.add(REL_NOHITSFOUND);
        rels.add(REL_HITSFOUND);
        rels.add(REL_FAILURE);
        this.relationships = Collections.unmodifiableSet(rels);
    }

    @Override
    public Set<Relationship> getRelationships() {
        return relationships;
    }

    @Override
    protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
        return properties;
    }

    @Override
    public void onTrigger(final ProcessContext context, final ProcessSession session) {

        FlowFile flowFile = session.get();
        if (flowFile == null) {
            return;
        }
        

        try {
            final List<ScanResult> list = new ArrayList<>();
            session.read(flowFile,
                    (final InputStream inputStream) -> {
                        list.add(client.scan(inputStream));
                    });
            StopWatch watch = new StopWatch();
            watch.start();
            watch.stop();
            watch.getDuration(TimeUnit.MILLISECONDS);
            final ScanResult scanResult = list.get(0);
            
            if (scanResult != null && scanResult instanceof ScanResult.OK) {
                flowFile = session.putAttribute(flowFile, "clamav.status", "nohitsfound");
                session.transfer(flowFile, REL_NOHITSFOUND);
                session.commit();
            } else if (scanResult != null && scanResult instanceof ScanResult.VirusFound) {
                Map<String, Collection<String>> results = ((ScanResult.VirusFound) scanResult).getFoundViruses();
                flowFile = session.putAttribute(flowFile, "clamav.status", "hitsfound");
                flowFile = session.putAttribute(flowFile, "clamav.results", results.get("stream").toString());
                session.transfer(flowFile, REL_HITSFOUND);
                session.commit();
            } else {
                session.transfer(flowFile, REL_FAILURE);
                session.commit();
            }

        } catch (ClamavException e) {
            session.transfer(flowFile, REL_FAILURE);
            session.commit();
            throw new ProcessException(e);
        }
    }


    @OnScheduled
    public final void onScheduled(final ProcessContext context) throws IOException {
        String clamHost = context.getProperty(HOST).evaluateAttributeExpressions().getValue();
        int clamPort = context.getProperty(PORT).evaluateAttributeExpressions().asInteger();

        client = new ClamavClient(clamHost, clamPort);
    }

}
